<?xml version="1.0" encoding="UTF-8"?>
<gate>
	<name>Beeline</name>
	<caption>БиЛайн</caption>
	<type>SMS</type>
	<class>HTTP</class>
	<version>40</version>
	<priority>10</priority>
	<country>Россия</country>
	<prefixlist>
		<prefix start="+7 9017"/>
		<prefix start="+7 901802" end="+7 901803"/>
		<prefix start="+7 902152" end="+7 902154"/>
		<prefix start="+7 902280"/>
		<prefix start="+7 902289"/>
		<prefix start="+7 902414" end="+7 902417"/>
		<prefix start="+7 902419"/>
		<prefix start="+7 902580" end="+7 902581"/>
		<prefix start="+7 903"/>
		<prefix start="+7 905" end="+7 906"/>
		<prefix start="+7 908027" end="+7 908029"/>
		<prefix start="+7 908035" end="+7 908039"/>
		<prefix start="+7 908694" end="+7 908698"/>
		<prefix start="+7 909"/>
		<prefix start="+7 960000" end="+7 962417"/>
		<prefix start="+7 962419" end="+7 962460"/>
		<prefix start="+7 96247" end="+7 96355"/>
		<prefix start="+7 963562" end="+7 963568"/>
		<prefix start="+7 963570" end="+7 963738"/>
		<prefix start="+7 963740" end="+7 964042"/>
		<prefix start="+7 964047" end="+7 964074"/>
		<prefix start="+7 964078" end="+7 964094"/>
		<prefix start="+7 964100" end="+7 964137"/>
		<prefix start="+7 964140" end="+7 964231"/>
		<prefix start="+7 964240" end="+7 964688"/>
		<prefix start="+7 964690" end="+7 964824"/>
		<prefix start="+7 964830" end="+7 965864"/>
		<prefix start="+7 965870" end="+7 965879"/>
		<prefix start="+7 96588" end="+7 96699"/>
		<prefix start="+7 967000" end="+7 967354"/>
		<prefix start="+7 967360" end="+7 967434"/>
		<prefix start="+7 967440" end="+7 967492"/>
		<prefix start="+7 96750"/>
		<prefix start="+7 967580" end="+7 967582"/>
		<prefix start="+7 967590" end="+7 967625"/>
		<prefix start="+7 967630" end="+7 967674"/>
		<prefix start="+7 967680" end="+7 967684"/>
		<prefix start="+7 967696"/>
		<prefix start="+7 967700" end="+7 967706"/>
		<prefix start="+7 967710" end="+7 967730"/>
		<prefix start="+7 967740" end="+7 967754"/>
		<prefix start="+7 967760" end="+7 967780"/>
		<prefix start="+7 967790" end="+7 967812"/>
		<prefix start="+7 967820" end="+7 967842"/>
		<prefix start="+7 967850" end="+7 967914"/>
		<prefix start="+7 967920" end="+7 967942"/>
		<prefix start="+7 967948" end="+7 967984"/>
		<prefix start="+7 967987" end="+7 967999"/>
		<prefix start="+7 96810" end="+7 96812"/>
		<prefix start="+7 96826" end="+7 96827"/>
		<prefix start="+7 9684" end="+7 9689"/>
	</prefixlist>
	<info>
		<maxsymbols>140</maxsymbols>
		<maxunicodesymbols>70</maxunicodesymbols>
		<supportflash>0</supportflash>
		<supportdtdelivery>0</supportdtdelivery>
		<supportunicode>1</supportunicode>
		<supportcheckdelivery>1</supportcheckdelivery>
		<captcha>1</captcha>
		<gateurl>http://moskva.beeline.ru/customers/products/mobile/services/details/otpravka-sms/</gateurl>
	</info>
	<classprops>
		<encoding>UTF-8</encoding>
		<pageurl>http://moskva.beeline.ru/customers/products/mobile/services/details/otpravka-sms/</pageurl>
		<imageurl>eval(
			begin
				Stored['captchaKey'] := Html.RegExp('name=&quot;_captcha_key&quot; value=&quot;(.*?)&quot;', 1);
				Result:='http://moskva.beeline.ru/captcha.ashx?' + 'w=148&amp;h=39&amp;key=' + Stored['captchaKey'] + '&amp;r=0.' + RandomString(DigitCaps,9);
			end;)
		</imageurl>
		<posturl>eval(
			var
				url: string;
			begin
				if (Stored['url']='') then
				begin
					url := Html.RegExp('ControllerUrl : &quot;(.*?)&quot;',1);
					url := 'http://moskva.beeline.ru' + ReplaceStr(url, '\u0026', '&amp;');
					Stored['url'] := url;
				end;	
				Result:=ReplaceStr(Stored['url'], 'replacethisaction', 'SendSms');
			end;)	
		</posturl>
		<postdata>eval(
			begin
				HTTP.Headers['X-Requested-With'] := 'XMLHttpRequest';

				PostData.Add('PhoneCode',SMS['Phone_Def']);
				PostData.Add('',SMS['Phone_Def']);
				PostData.Add('','Отправить сообщение');
				PostData.Add('ca3e1013-b580-a401-37fc-6213928b1656.PhoneComplexElement',
					Copy(SMS['Phone_Number'], 1, 3) + '-' +
					Copy(SMS['Phone_Number'], 4, 2) + '-' +
					Copy(SMS['Phone_Number'], 6, 2)
				);
				PostData.Add('Phone',SMS['Phone_Number']);
				PostData.Add('_captcha_key',Stored['captchaKey']);
				PostData.Add('Captcha',SMS['Code']);
				PostData.Add('CheckboxTransliterate',iff(IsAscii(SMS['Text']),'true','false'));
				PostData.Add('Body',SMS['Text']);
				PostData.Add('WidgetId',Html.RegExp('WidgetId: &quot;(.*?)&quot;', 1));

			end;)
		</postdata>
		<success>eval(
			begin
				Result := HTML.ExistsStr('&quot;IsSucceeded&quot;:true');
				//if (Result) then
					Stored['smsId'] := Html.RegExp('name=\\&quot;Id\\&quot;.*?value=\\&quot;(.*?)\\&quot;', 1);
			end;)
		</success>
		<error>eval(Html.RegExp('&quot;ErrorMessage&quot;:&quot;(.*?)&quot;', 1))</error>
		<cd_method>POST</cd_method>
		<cd_posturl>eval(ReplaceStr(Stored['url'], 'replacethisaction', 'SendSmsStatus'))</cd_posturl>
		<cd_postdata>eval(
				begin
					HTTP.Headers['X-Requested-With'] := 'XMLHttpRequest';
					PostData.Add('Id',Stored['smsId']);
					PostData.Add('Phone','');
				end;)
		</cd_postdata>
		<cd_success>eval(
						begin
							if Html.ExistsStr('&quot;StatusText&quot;:&quot;ожидает отправки&quot;') then
								Result:='WAIT'
							else Result:=Html.ExistsStr('&quot;StatusText&quot;:&quot;отправлено&quot;');
						end;	
					   )
		</cd_success>
		<cd_error>Ошибка подверждения доставки</cd_error>
	</classprops>
</gate>
